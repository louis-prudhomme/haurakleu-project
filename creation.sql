
/* Application user
We check : 
- his email
- phone number
- the strength of his password : it must have a capital letter, 
a lowercase letter, a number, a special character and a length greater or equal than 8

The is_my_user field indicates whether the user is a myefrei user or not (we check that the field is either 0: 
the user is not a myefrei user, or 1: he is) */

CREATE TABLE tab_user
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,first_name VARCHAR2(64)
,last_name VARCHAR2(64)
,avatar_path VARCHAR2(256)
,phone_number CHAR(10)
,email VARCHAR2(256)
,password VARCHAR(128)
,is_my_user INT DEFAULT 0 CHECK (is_my_user IN (0, 1))
,CONSTRAINT check_email
    CHECK (email LIKE '%@%.%'
		AND email NOT LIKE '@%'
		AND email NOT LIKE '%@%@%')
,CONSTRAINT check_phone_number
    CHECK (REGEXP_LIKE(phone_number, '^((\+)33|0)[1-9](\d{2}){4}$'))
,CONSTRAINT check_password_strength
    CHECK(REGEXP_LIKE(password, '^.*[A-Z].*$')
		AND REGEXP_LIKE(password, '^.*[0-9].*$')
		AND REGEXP_LIKE(password, '^.*[^A-Z,0-9].*$')
		AND REGEXP_LIKE(password, '^.*[!@#$%^&*(),.?":{}|<>].*$')
		AND LENGTHB(password) >= 8)
);

-- The instructions of a report. It contains the guidelines and the deadline of the report.

CREATE TABLE tab_instructions
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,guidelines VARCHAR2(512)
,deadline DATE
);

-- Company in which the student did his internship and therefore to which the report relates

CREATE TABLE tab_company
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,name VARCHAR2(64)
);

-- Report level of confidentiality

CREATE TABLE tab_confidentiality_level
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,label VARCHAR2(64)
);

-- Teaching field of the teacher 

CREATE TABLE tab_teaching_field
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,label VARCHAR2(64)
);

-- Study level of the student : L1, L2, L3, M1, M2 or Out (which means that the student is no longer in EFREI)

CREATE TABLE tab_study_level
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,label VARCHAR2(64)
);

/* student company tutor : it's a simple user with a job.
Its id must also be in the user table. 

Note that : 
- Its id is a foreign key of the id in the table user.
*/

CREATE TABLE tab_company_tutor
(id INT NOT NULL PRIMARY KEY
,job VARCHAR2(64)
,CONSTRAINT inherit_user_tutor FOREIGN KEY (id)
	REFERENCES tab_user (id)
);

/* teacher (pedagogic tutor of the student) : it's a simple user with a hired date
Its id must also be in the user table 

Note that : 
- its id is a foreign key of the id in the user table */

CREATE TABLE tab_teacher
(id INT NOT NULL PRIMARY KEY
,hired DATE
,CONSTRAINT inherit_user_teacher FOREIGN KEY (id)
	REFERENCES tab_user (id)
);

/* This table makes it possible to make the link between a professor and his teaching field 
 and thus to allow a professor to have several teaching fields. 

 Note that : 
- Its id_teacher is a foreign key of the id in the table teacher
- Its id_field is a foreign key of the id in the table teaching field
- And in order to have a unique primary key, its primary key is composed of the id_teacher and the id_field */

CREATE TABLE rel_teaches
(id_teacher INT NOT NULL
,id_field INT NOT NULL
,CONSTRAINT fk_teaches_teacher FOREIGN KEY (id_teacher)
	REFERENCES tab_teacher (id)
,CONSTRAINT fk_teaches_field FOREIGN KEY (id_field)
	REFERENCES tab_teaching_field (id)
,CONSTRAINT pk_teaches PRIMARY KEY (id_teacher, id_field)
);

/* Major of the student (Software Engineering, Big Data etc...)
It has a major director who is a teacher and a label.

Note that : 
- Its id_major_director is a foreign key of the id in the table teacher */

CREATE TABLE tab_major
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,label VARCHAR2(64)
,id_major_director INT NOT NULL
,CONSTRAINT fk_major_director FOREIGN KEY (id_major_director)
	REFERENCES tab_teacher (id)
);

/* EFREI Student it's a user with : 
- a promotion ie estimated year of graduation,  we check that it is between 1936 : years of the school creation and 2154 to avoid any mistake
- a field which indicates if it is an apprentice (we check that the value is 0 : he isn't or 1 : he is)
- he is linked with a major : Software Engineering, Big Data etc...
- he is linked with a study level : L1, L2, L3, M1, M2 or Out (if the student isn't in the school anymore)

Note that : 
- its id is a foreign key of the id in the user table
- its id_major is a foreign key of the id in the major table
- its id_study_level is a foreign key of the id in the table study_level */

CREATE TABLE tab_student
(id INT NOT NULL PRIMARY KEY
,promotion INT CHECK (promotion BETWEEN 1936 AND 2154)
,is_apprentice INT DEFAULT 0 CHECK (is_apprentice IN (0, 1))
,id_major INT NOT NULL
,id_study_level INT NOT NULL
,CONSTRAINT inherit_user_student FOREIGN KEY (id)
	REFERENCES tab_user (id)
,CONSTRAINT fk_student_major FOREIGN KEY (id_major)
	REFERENCES tab_major (id)
,CONSTRAINT fk_student_level FOREIGN KEY (id_study_level)
	REFERENCES tab_study_level (id)
);

/* A student performs instructions. 
This table allow us to link the student with the table instructions and it allows a student
to have multiple instructions.

Note that : 
- its id_student is a foreign key of the table student
- its id_instructions is a foreign key of the table instructions */

CREATE TABLE rel_performs
(id_student INT NOT NULL
,id_instructions INT NOT NULL
,CONSTRAINT fk_performs_student FOREIGN KEY (id_student)
	REFERENCES tab_student (id)
,CONSTRAINT fk_performs_instructions FOREIGN KEY (id_instructions)
	REFERENCES tab_instructions (id)
,CONSTRAINT pk_performs PRIMARY KEY (id_student, id_instructions)
);

/* Internship or apprentice report.
It has : 
- A title : report title
- Submitted : date of report submission (the default date is the date of data insertion)
- is_pedag_vetted : indicates if the pedagogic tutor has validated the report 0 if not, 1 otherwise (we check the value)
- is_company_vetted : indicates if the company tutor has validated the report 0 if not, 1 otherwise (we check the value)
- id_student : id of the student who wrote the report
- id_company : id of the company in which the student did his internship
- id_pedag_tutor : id of the pedagogic tutor which has supervised the internship
- id_company_tutor : id of the company tutor which has supervised the internship
- id_conf_level : id of the confidential level of the report
- id_instructions : id of the report instructions 

Note that : 

- the id_student is a foreign key of the id in the table student
- the id_company is a foreign key of the id in the table company
- the id_pedag_tutor is a foreign key of the id in the table teacher
- the id_company_tutor is a foreign key of the id in the table company_tutor
- the id_conf_level is a foreign key of the id in the table confidentiality
- the id_instructions is a foreign key of the id in the table instructions */

CREATE TABLE tab_report
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,title VARCHAR2(64)
,submitted DATE DEFAULT SYSDATE
,is_pedag_vetted INT DEFAULT 0 CHECK (is_pedag_vetted IN (0, 1))
,is_company_vetted INT DEFAULT 0 CHECK (is_company_vetted IN (0, 1))
,id_student INT NOT NULL
,id_company INT NOT NULL
,id_pedag_tutor INT NOT NULL
,id_company_tutor INT NOT NULL
,id_conf_level INT NOT NULL
,id_instructions INT NOT NULL
,CONSTRAINT fk_report_student FOREIGN KEY (id_student)
	REFERENCES tab_student (id)
,CONSTRAINT fk_report_company FOREIGN KEY (id_company)
	REFERENCES tab_company (id)
,CONSTRAINT fk_report_teacher FOREIGN KEY (id_pedag_tutor)
	REFERENCES tab_teacher (id)
,CONSTRAINT fk_report_comp_tutor FOREIGN KEY (id_company_tutor)
	REFERENCES tab_company_tutor (id)
,CONSTRAINT fk_report_conf_level FOREIGN KEY (id_conf_level)
	REFERENCES tab_confidentiality_level (id)
,CONSTRAINT fk_report_instructions FOREIGN KEY (id_instructions)
	REFERENCES tab_instructions (id)
);

/* Keyword linked to the report which allows you to search by keywords : 
for example for a report on a C # internship, a C # keyword can be added and linked to the report */

CREATE TABLE tab_keyword
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,word VARCHAR2(32)
);

/* This table allow us to link a specific keyword with a report and most of all
allow a report to have multiple keywords 

It contains : 
- an id_report : id of the report
- an id_keyword : if of the keyword

and note that : 
- id_report is a foreign key of the id in the table report
- id_keyword is a foreign key of the field id in the table keyword */

CREATE TABLE rel_has
(id_report INT NOT NULL
,id_keyword INT NOT NULL
,CONSTRAINT fk_has_report FOREIGN KEY (id_report)
	REFERENCES tab_report (id) ON DELETE CASCADE
,CONSTRAINT fk_has_keyword FOREIGN KEY (id_keyword)
	REFERENCES tab_keyword (id)
,CONSTRAINT pk_has PRIMARY KEY (id_report, id_keyword)
);

/* This table allow to keep a record of : 
- The number of consultation of each report (field consults)
- The number of copy of each report (field copies)
- the number of prints of each report (field prints)
- the number of downloads of each report (field downloads)

Note that : 
- its primary key is the field id_report
- id_report is a foreign key of the field id in the table record. If a report is deleted, all his records are deleted too. */

CREATE TABLE audit_report
(id_report INT NOT NULL
,consults INT DEFAULT 0
,copies INT DEFAULT 0
,prints INT DEFAULT 0
,downloads INT DEFAULT 0
,CONSTRAINT fk_audit_report FOREIGN KEY (id_report)
	REFERENCES tab_report (id) ON DELETE CASCADE
,CONSTRAINT pk_audit_report PRIMARY KEY (id_report)
);

/* This table allow to keep a record of the number of researches per keyword

Note that : 
- its primary key is id_keyword
- id_keyword is a foreign key of the field id in the table keyword. If a keyword is deleted, all his records are deleted too. */

CREATE TABLE adt_keyword
(id_keyword INT NOT NULL
,searches INT DEFAULT 0
,CONSTRAINT fk_audit_keyword FOREIGN KEY (id_keyword)
	REFERENCES tab_keyword (id) ON DELETE CASCADE
,CONSTRAINT pk_audit_keyword PRIMARY KEY (id_keyword)
);

